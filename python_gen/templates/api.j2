"""{{header()}}"""

from beanie import PydanticObjectId
from fastapi import APIRouter, HTTPException
from typing import List
from pydantic import BaseModel

from models.{{typedef.name|lower_case}} import {{typedef.name|upper_case}}, {{typedef.name|upper_case}}AllOptional


router = APIRouter()


async def get_{{typedef.name|lower_case}}_from_db(key):
    {{typedef.name|lower_case}} = await {{typedef.name|upper_case}}.find({"{{id_field}}": key}).first_or_none() or await {{typedef.name|upper_case}}.get(
        key
    )
    if not {{typedef.name|lower_case}}:
        raise HTTPException(status_code=404, detail="{{typedef.name|upper_case}} record not found!")

{% if "@read" in typedef.crud_dict %}
@router.get("/")
async def get_all_{{typedef.name|lower_case}}() -> List[{{typedef.name|upper_case}}]:
    return await {{typedef.name|upper_case}}.find_all().to_list()


@router.get("/{id}")
async def get_{{typedef.name|lower_case}}(id) -> {{typedef.name|upper_case}}:
    return await get_{{typedef.name|lower_case}}_from_db(id)
{%- endif %}
{% if "@create" in typedef.crud_dict %}
@router.post(
    "/",
)
async def create_{{typedef.name|lower_case}}({{typedef.name|lower_case}}: {{typedef.name|upper_case}}) -> {{typedef.name|upper_case}}:
    try:
        return await {{typedef.name|lower_case}}.create()
    except BaseException as e:
        raise HTTPException(status_code=400, detail=str(e))
{%- endif %}
{% if "@update" in typedef.crud_dict %}
@router.patch(
    "/{id}",
)
async def put_{{typedef.name|lower_case}}(id, {{typedef.name|lower_case}}: {{typedef.name|upper_case}}AllOptional) -> {{typedef.name|upper_case}}:
    req = {k: v for k, v in {{typedef.name|lower_case}}.dict().items() if v is not None and v is not ""}
    update_query = {"$set": {field: value for field, value in req.items()}}

    {{typedef.name|lower_case}} = await get_{{typedef.name|lower_case}}_from_db(id)

    await {{typedef.name|lower_case}}.update(update_query)
    return {{typedef.name|lower_case}}


@router.put(
    "/{id}",
)
async def put_{{typedef.name|lower_case}}(id, {{typedef.name|lower_case}}: {{typedef.name|upper_case}}) -> {{typedef.name|upper_case}}:
    req = {k: v for k, v in {{typedef.name|lower_case}}.dict().items() if v is not None and v is not ""}
    update_query = {"$set": {field: value for field, value in req.items()}}

    {{typedef.name|lower_case}} = await get_{{typedef.name|lower_case}}_from_db(id)
    await {{typedef.name|lower_case}}.update(update_query)
    return {{typedef.name|lower_case}}
{%- endif %}
{% if "@delete" in typedef.crud_dict %}
@router.delete("/{id}")
async def delete_{{typedef.name|lower_case}}(id) -> dict:
    {{typedef.name|lower_case}} = await get_{{typedef.name|lower_case}}_from_db(id)
    await {{typedef.name|lower_case}}.delete()
    return {"message": "{{typedef.name|upper_case}} deleted successfully"}
{%- endif %}

{%- for function in api.functions %}
@router.{{function.http_verb|all_lower}}("/{{function.rest_path}}")
async def {{function.name}}({{function|get_params}}) -> {{function.ret_type|silvera_type_to_pydantic}}:
    # TODO: IMPLEMENT METHOD
    pass
{% endfor %}
