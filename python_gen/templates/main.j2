from fastapi import FastAPI
from beanie import init_beanie
import motor.motor_asyncio
from aiokafka import AIOKafkaProducer
import asyncio


from messaging.messaging import consume, aioproducer

{%- for typedef in typedefs %}
from models.{{typedef.name|lower_case}} import {{typedef.name|upper_case}}
from api.{{typedef.name|lower_case}} import router as {{typedef.name|upper_case}}Router 
{%- endfor %}
from api.functions import router as FunctionsRouter 


loop = asyncio.get_event_loop()

async def init_db():
    client = motor.motor_asyncio.AsyncIOMotorClient("mongodb://localhost:27017/")

    await init_beanie(
        database=client.db_name,
        document_models=[
            {%- for typedef in typedefs %}
            {{typedef.name|upper_case}},
            {%- endfor %}
        ],
    )


app = FastAPI()


@app.on_event("startup")
async def start_db():
    await init_db()


@app.on_event("startup")
async def start_kafka():
    await aioproducer.start()
    loop.create_task(consume())


@app.on_event("shutdown")
async def shutdown_kafka():
    await aioproducer.stop()
    await consumer.stop()




{%- for typedef in typedefs %}
app.include_router({{typedef.name|upper_case}}Router, tags=["{{typedef.name|upper_case}}s"], prefix="/{{typedef.name|lower_case}}s")
{%- endfor %}
app.include_router(FunctionsRouter)
